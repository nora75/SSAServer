// Code generated by goa v3.0.2, DO NOT EDIT.
//
// SSAServer HTTP server encoders and decoders
//
// Command:
// $ goa gen SSAServer/design

package server

import (
	ssaserver "SSAServer/gen/ssa_server"
	ssaserverviews "SSAServer/gen/ssa_server/views"
	"context"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeRegisterResponse returns an encoder for responses returned by the
// SSAServer Register endpoint.
func EncodeRegisterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*ssaserverviews.SsaResult)
		enc := encoder(ctx, w)
		body := NewRegisterResponseBodyExtended(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRegisterRequest returns a decoder for requests sent to the SSAServer
// Register endpoint.
func DecodeRegisterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewRegisterPayload(&body)

		return payload, nil
	}
}

// EncodeRegisterError returns an encoder for errors returned by the Register
// SSAServer endpoint.
func EncodeRegisterError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Invalid_Group_ID":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewRegisterInvalidGroupIDResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Group_ID")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "The_user_already_exists":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewRegisterTheUserAlreadyExistsResponseBody(res)
			w.Header().Set("goa-error", "The_user_already_exists")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Invalid_Request":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewRegisterInvalidRequestResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLoginResponse returns an encoder for responses returned by the
// SSAServer Login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*ssaserverviews.SsaResult)
		enc := encoder(ctx, w)
		body := NewLoginResponseBodyExtended(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoginRequest returns a decoder for requests sent to the SSAServer
// Login endpoint.
func DecodeLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body LoginRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateLoginRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewLoginPayload(&body)

		return payload, nil
	}
}

// EncodeLoginError returns an encoder for errors returned by the Login
// SSAServer endpoint.
func EncodeLoginError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Invalid_Request":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewLoginInvalidRequestResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Invalid_Group_ID":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewLoginInvalidGroupIDResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Group_ID")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeChangeGroupResponse returns an encoder for responses returned by the
// SSAServer Change_group endpoint.
func EncodeChangeGroupResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeChangeGroupRequest returns a decoder for requests sent to the
// SSAServer Change_group endpoint.
func DecodeChangeGroupRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ChangeGroupRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateChangeGroupRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			userID int

			params = mux.Vars(r)
		)
		{
			userIDRaw := params["user_id"]
			v, err2 := strconv.ParseInt(userIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("userID", userIDRaw, "integer"))
			}
			userID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewChangeGroupPayload(&body, userID)

		return payload, nil
	}
}

// EncodeChangeGroupError returns an encoder for errors returned by the
// Change_group SSAServer endpoint.
func EncodeChangeGroupError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Invalid_Group_ID":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewChangeGroupInvalidGroupIDResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Group_ID")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Invalid_Request":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewChangeGroupInvalidRequestResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteUserResponse returns an encoder for responses returned by the
// SSAServer Delete_user endpoint.
func EncodeDeleteUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteUserRequest returns a decoder for requests sent to the SSAServer
// Delete_user endpoint.
func DecodeDeleteUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeleteUserRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeleteUserRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			userID int

			params = mux.Vars(r)
		)
		{
			userIDRaw := params["user_id"]
			v, err2 := strconv.ParseInt(userIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("userID", userIDRaw, "integer"))
			}
			userID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteUserPayload(&body, userID)

		return payload, nil
	}
}

// EncodeDeleteUserError returns an encoder for errors returned by the
// Delete_user SSAServer endpoint.
func EncodeDeleteUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Invalid_Request":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewDeleteUserInvalidRequestResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSaveDataResponse returns an encoder for responses returned by the
// SSAServer Save_data endpoint.
func EncodeSaveDataResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeSaveDataRequest returns a decoder for requests sent to the SSAServer
// Save_data endpoint.
func DecodeSaveDataRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SaveDataRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSaveDataRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			groupID string

			params = mux.Vars(r)
		)
		groupID = params["group_id"]
		payload := NewSaveDataPayload(&body, groupID)

		return payload, nil
	}
}

// EncodeSaveDataError returns an encoder for errors returned by the Save_data
// SSAServer endpoint.
func EncodeSaveDataError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Invalid_Group_ID":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewSaveDataInvalidGroupIDResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Group_ID")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "Invalid_Request":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewSaveDataInvalidRequestResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Invalid_Data":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewSaveDataInvalidDataResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Data")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReturnDataListResponse returns an encoder for responses returned by
// the SSAServer Return_data_list endpoint.
func EncodeReturnDataListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(ssaserverviews.SsaResultCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewSsaResultResponseCollection(res.Projected)
		case "extended":
			body = NewSsaResultResponseExtendedCollection(res.Projected)
		case "data":
			body = NewSsaResultResponseDataCollection(res.Projected)
		case "data_extended":
			body = NewSsaResultResponseDataExtendedCollection(res.Projected)
		case "data_extended_with_image":
			body = NewSsaResultResponseDataExtendedWithImageCollection(res.Projected)
		case "data_list_origin":
			body = NewSsaResultResponseDataListOriginCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeReturnDataListRequest returns a decoder for requests sent to the
// SSAServer Return_data_list endpoint.
func DecodeReturnDataListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ReturnDataListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateReturnDataListRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			groupID string

			params = mux.Vars(r)
		)
		groupID = params["group_id"]
		payload := NewReturnDataListPayload(&body, groupID)

		return payload, nil
	}
}

// EncodeReturnDataListError returns an encoder for errors returned by the
// Return_data_list SSAServer endpoint.
func EncodeReturnDataListError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Invalid_Group_ID":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewReturnDataListInvalidGroupIDResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Group_ID")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "Invalid_Request":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewReturnDataListInvalidRequestResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodePickUpDataResponse returns an encoder for responses returned by the
// SSAServer Pick_up_data endpoint.
func EncodePickUpDataResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*ssaserverviews.SsaResult)
		enc := encoder(ctx, w)
		body := NewPickUpDataResponseBodyDataExtendedWithImage(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePickUpDataRequest returns a decoder for requests sent to the SSAServer
// Pick_up_data endpoint.
func DecodePickUpDataRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PickUpDataRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePickUpDataRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			groupID  string
			dataType string

			params = mux.Vars(r)
		)
		groupID = params["group_id"]
		dataType = params["data_type"]
		payload := NewPickUpDataPayload(&body, groupID, dataType)

		return payload, nil
	}
}

// EncodePickUpDataError returns an encoder for errors returned by the
// Pick_up_data SSAServer endpoint.
func EncodePickUpDataError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "Invalid_Group_ID":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewPickUpDataInvalidGroupIDResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Group_ID")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "Invalid_Request":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewPickUpDataInvalidRequestResponseBody(res)
			w.Header().Set("goa-error", "Invalid_Request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Invalid_data_name":
			res := v.(*ssaserver.SsaError)
			enc := encoder(ctx, w)
			body := NewPickUpDataInvalidDataNameResponseBody(res)
			w.Header().Set("goa-error", "Invalid_data_name")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
