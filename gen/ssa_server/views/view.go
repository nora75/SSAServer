// Code generated by goa v3.0.2, DO NOT EDIT.
//
// SSAServer views
//
// Command:
// $ goa gen SSAServer/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// SsaResult is the viewed result type that is projected based on a view.
type SsaResult struct {
	// Type to project
	Projected *SsaResultView
	// View to render
	View string
}

// SsaResultCollection is the viewed result type that is projected based on a
// view.
type SsaResultCollection struct {
	// Type to project
	Projected SsaResultCollectionView
	// View to render
	View string
}

// SsaResultView is a type that runs validations on a projected type.
type SsaResultView struct {
	// User id
	UserID *int
	// User Name
	UserName *string
	// User Password
	Password *string
	// User mail-address
	Mail *string
	// Group ID
	GroupID *string
	// Data name
	DataName *string
	// Data
	Data interface{}
	// Image data
	Image interface{}
	// Data's name
	DataType *int
	// Data title
	Title *string
	// image's name
	ImageName *string
	// date time
	DateTime *string
}

// SsaResultCollectionView is a type that runs validations on a projected type.
type SsaResultCollectionView []*SsaResultView

var (
	// SsaResultMap is a map of attribute names in result type SsaResult indexed by
	// view name.
	SsaResultMap = map[string][]string{
		"default": []string{
			"user_id",
			"mail",
			"user_name",
		},
		"extended": []string{
			"user_id",
			"mail",
			"user_name",
			"group_id",
		},
		"data": []string{
			"Data",
			"data_type",
			"data_name",
		},
		"data_extended": []string{
			"Data",
			"data_type",
			"data_name",
			"title",
		},
		"data_extended_with_image": []string{
			"Data",
			"data_type",
			"data_name",
			"title",
			"Image",
			"image_name",
		},
		"data_list_origin": []string{
			"data_type",
			"data_name",
			"title",
			"date_time",
			"user_name",
		},
	}
	// SsaResultCollectionMap is a map of attribute names in result type
	// SsaResultCollection indexed by view name.
	SsaResultCollectionMap = map[string][]string{
		"default": []string{
			"user_id",
			"mail",
			"user_name",
		},
		"extended": []string{
			"user_id",
			"mail",
			"user_name",
			"group_id",
		},
		"data": []string{
			"Data",
			"data_type",
			"data_name",
		},
		"data_extended": []string{
			"Data",
			"data_type",
			"data_name",
			"title",
		},
		"data_extended_with_image": []string{
			"Data",
			"data_type",
			"data_name",
			"title",
			"Image",
			"image_name",
		},
		"data_list_origin": []string{
			"data_type",
			"data_name",
			"title",
			"date_time",
			"user_name",
		},
	}
)

// ValidateSsaResult runs the validations defined on the viewed result type
// SsaResult.
func ValidateSsaResult(result *SsaResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSsaResultView(result.Projected)
	case "extended":
		err = ValidateSsaResultViewExtended(result.Projected)
	case "data":
		err = ValidateSsaResultViewData(result.Projected)
	case "data_extended":
		err = ValidateSsaResultViewDataExtended(result.Projected)
	case "data_extended_with_image":
		err = ValidateSsaResultViewDataExtendedWithImage(result.Projected)
	case "data_list_origin":
		err = ValidateSsaResultViewDataListOrigin(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended", "data", "data_extended", "data_extended_with_image", "data_list_origin"})
	}
	return
}

// ValidateSsaResultCollection runs the validations defined on the viewed
// result type SsaResultCollection.
func ValidateSsaResultCollection(result SsaResultCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSsaResultCollectionView(result.Projected)
	case "extended":
		err = ValidateSsaResultCollectionViewExtended(result.Projected)
	case "data":
		err = ValidateSsaResultCollectionViewData(result.Projected)
	case "data_extended":
		err = ValidateSsaResultCollectionViewDataExtended(result.Projected)
	case "data_extended_with_image":
		err = ValidateSsaResultCollectionViewDataExtendedWithImage(result.Projected)
	case "data_list_origin":
		err = ValidateSsaResultCollectionViewDataListOrigin(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "extended", "data", "data_extended", "data_extended_with_image", "data_list_origin"})
	}
	return
}

// ValidateSsaResultView runs the validations defined on SsaResultView using
// the "default" view.
func ValidateSsaResultView(result *SsaResultView) (err error) {

	return
}

// ValidateSsaResultViewExtended runs the validations defined on SsaResultView
// using the "extended" view.
func ValidateSsaResultViewExtended(result *SsaResultView) (err error) {

	return
}

// ValidateSsaResultViewData runs the validations defined on SsaResultView
// using the "data" view.
func ValidateSsaResultViewData(result *SsaResultView) (err error) {

	return
}

// ValidateSsaResultViewDataExtended runs the validations defined on
// SsaResultView using the "data_extended" view.
func ValidateSsaResultViewDataExtended(result *SsaResultView) (err error) {

	return
}

// ValidateSsaResultViewDataExtendedWithImage runs the validations defined on
// SsaResultView using the "data_extended_with_image" view.
func ValidateSsaResultViewDataExtendedWithImage(result *SsaResultView) (err error) {

	return
}

// ValidateSsaResultViewDataListOrigin runs the validations defined on
// SsaResultView using the "data_list_origin" view.
func ValidateSsaResultViewDataListOrigin(result *SsaResultView) (err error) {

	return
}

// ValidateSsaResultCollectionView runs the validations defined on
// SsaResultCollectionView using the "default" view.
func ValidateSsaResultCollectionView(result SsaResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsaResultView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsaResultCollectionViewExtended runs the validations defined on
// SsaResultCollectionView using the "extended" view.
func ValidateSsaResultCollectionViewExtended(result SsaResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsaResultViewExtended(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsaResultCollectionViewData runs the validations defined on
// SsaResultCollectionView using the "data" view.
func ValidateSsaResultCollectionViewData(result SsaResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsaResultViewData(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsaResultCollectionViewDataExtended runs the validations defined on
// SsaResultCollectionView using the "data_extended" view.
func ValidateSsaResultCollectionViewDataExtended(result SsaResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsaResultViewDataExtended(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsaResultCollectionViewDataExtendedWithImage runs the validations
// defined on SsaResultCollectionView using the "data_extended_with_image" view.
func ValidateSsaResultCollectionViewDataExtendedWithImage(result SsaResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsaResultViewDataExtendedWithImage(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSsaResultCollectionViewDataListOrigin runs the validations defined
// on SsaResultCollectionView using the "data_list_origin" view.
func ValidateSsaResultCollectionViewDataListOrigin(result SsaResultCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateSsaResultViewDataListOrigin(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
