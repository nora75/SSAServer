// Code generated by goa v3.0.2, DO NOT EDIT.
//
// SSAServer endpoints
//
// Command:
// $ goa gen SSAServer/design

package ssaserver

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "SSAServer" service endpoints.
type Endpoints struct {
	Register       goa.Endpoint
	Login          goa.Endpoint
	ChangeGroup    goa.Endpoint
	DeleteUser     goa.Endpoint
	SaveData       goa.Endpoint
	ReturnDataList goa.Endpoint
	PickUpData     goa.Endpoint
}

// NewEndpoints wraps the methods of the "SSAServer" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Register:       NewRegisterEndpoint(s),
		Login:          NewLoginEndpoint(s),
		ChangeGroup:    NewChangeGroupEndpoint(s),
		DeleteUser:     NewDeleteUserEndpoint(s),
		SaveData:       NewSaveDataEndpoint(s),
		ReturnDataList: NewReturnDataListEndpoint(s),
		PickUpData:     NewPickUpDataEndpoint(s),
	}
}

// Use applies the given middleware to all the "SSAServer" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Register = m(e.Register)
	e.Login = m(e.Login)
	e.ChangeGroup = m(e.ChangeGroup)
	e.DeleteUser = m(e.DeleteUser)
	e.SaveData = m(e.SaveData)
	e.ReturnDataList = m(e.ReturnDataList)
	e.PickUpData = m(e.PickUpData)
}

// NewRegisterEndpoint returns an endpoint function that calls the method
// "Register" of service "SSAServer".
func NewRegisterEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RegisterPayload)
		res, err := s.Register(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSsaResult(res, "extended")
		return vres, nil
	}
}

// NewLoginEndpoint returns an endpoint function that calls the method "Login"
// of service "SSAServer".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewChangeGroupEndpoint returns an endpoint function that calls the method
// "Change_group" of service "SSAServer".
func NewChangeGroupEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ChangeGroupPayload)
		return s.ChangeGroup(ctx, p)
	}
}

// NewDeleteUserEndpoint returns an endpoint function that calls the method
// "Delete_user" of service "SSAServer".
func NewDeleteUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteUserPayload)
		return s.DeleteUser(ctx, p)
	}
}

// NewSaveDataEndpoint returns an endpoint function that calls the method
// "Save_data" of service "SSAServer".
func NewSaveDataEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SaveDataPayload)
		return s.SaveData(ctx, p)
	}
}

// NewReturnDataListEndpoint returns an endpoint function that calls the method
// "Return_data_list" of service "SSAServer".
func NewReturnDataListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ReturnDataListPayload)
		res, view, err := s.ReturnDataList(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSsaResultCollection(res, view)
		return vres, nil
	}
}

// NewPickUpDataEndpoint returns an endpoint function that calls the method
// "Pick_up_data" of service "SSAServer".
func NewPickUpDataEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PickUpDataPayload)
		res, err := s.PickUpData(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSsaResult(res, "extended")
		return vres, nil
	}
}
